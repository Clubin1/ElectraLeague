<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
    <!--<link rel="stylesheet" href="/assets/css/custom.css">-->
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/solid.js" integrity="sha384-tzzSw1/Vo+0N5UhStP3bvwWPq+uvzCMfrN1fEFe+xBmv1C/AtVX5K0uZtmcHitFZ" crossorigin="anonymous"></script>
    <script defer src="https://use.fontawesome.com/releases/v5.0.13/js/fontawesome.js" integrity="sha384-6OIrr52G08NpOFSZdxxz1xdNSndlD4vdcf/q2myIUVO0VsqaGHJsB0RaBE01VTOY" crossorigin="anonymous"></script>
    <script src="https://code.jscharting.com/2.9.0/jscharting.js"></script>

    <link rel="stylesheet" href="home.css">
    <title></title>
</head>
<body>
    
    <div     id="particles-js">
        <div class="caption text-center header-bg info-col">
            <h1>Electra League </h1>
            <h3 class="col-12"> Join and play on our great community servers</h3>
            <div class="shrink">
                <div class="links">
                  <a href="/leaderboard"><p class="link-1">Leaderboards</p></a> 
                  <a href="/bans"><p class="link-2">Bans</p></a> 
                   <a href="/server"><p class="link-3">Servers</p></a>
                    <a href="/appeal"><p class="link-4">Appeal</p></a>
                    <a href="/faq"><p class="link-5">FAQ</p></a>

                    <a href="/contact"><p class="link-6">Contact</p></a>

                </div>
            </div>
            <div class="stem-icons">
        <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
width="50" height="50"
viewBox="0 0 172 172"
style=" fill:#000000;"><g fill="none" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><path d="M0,172v-172h172v172z" fill="none"></path><g id="original-icon" fill="#ffffff"><path d="M79.44922,5.375c-3.71631,0 -6.92871,2.50903 -7.82104,6.10986l-2.38306,9.44824c-6.10986,1.57471 -11.96777,3.99976 -17.39526,7.23315l-8.37744,-5.02857c-3.18091,-1.90015 -7.22266,-1.39624 -9.84717,1.21777l-9.26978,9.26978c-2.62451,2.61401 -3.11792,6.66626 -1.21777,9.84717l5.00757,8.35645c-3.2124,5.43799 -5.63745,11.2959 -7.19116,17.42676l-9.46924,2.37256c-3.60083,0.89233 -6.10986,4.11523 -6.10986,7.82104v13.10156c0,3.71631 2.50903,6.92871 6.10986,7.82104l9.44824,2.38306c1.57471,6.12036 3.99976,11.97827 7.23315,17.39526l-5.02857,8.37744c-1.90015,3.18091 -1.40674,7.23315 1.21777,9.84717l9.26978,9.26978c2.62451,2.62451 6.66626,3.11792 9.84717,1.21777l8.36695,-5.00757c5.43799,3.2124 11.2959,5.64795 17.41626,7.19116l2.37256,9.47974c0.89233,3.59033 4.11523,6.09936 7.82104,6.09936h13.10156c3.71631,0 6.92871,-2.50903 7.82104,-6.09936l2.38306,-9.46924c6.10986,-1.56421 11.96777,-3.98926 17.39526,-7.22266l8.37744,5.02857c3.18091,1.90015 7.22266,1.39624 9.84717,-1.21777l9.26978,-9.26978c2.62451,-2.61401 3.11792,-6.66626 1.21777,-9.84717l-5.00757,-8.35645c3.2124,-5.43799 5.63745,-11.2959 7.19116,-17.42676l9.47974,-2.37256c3.59033,-0.89233 6.09936,-4.11523 6.09936,-7.82104v-13.10156c0,-3.70581 -2.50903,-6.92871 -6.09936,-7.82104l-9.46924,-2.38306c-1.56421,-6.12036 -3.98926,-11.97827 -7.22266,-17.39526l5.02857,-8.37744c1.90015,-3.18091 1.40674,-7.23315 -1.21777,-9.84717l-9.26978,-9.26978c-2.62451,-2.62451 -6.66626,-3.11792 -9.84717,-1.21777l-8.36694,5.00757c-5.43799,-3.2124 -11.2959,-5.64795 -17.41626,-7.19116l-2.37256,-9.46924c-0.90283,-3.60083 -4.11523,-6.10986 -7.82104,-6.10986zM79.44922,10.75h13.10156c1.23877,0 2.30957,0.83984 2.60352,2.03662l2.37256,9.46924c0.47241,1.91065 1.96313,3.40137 3.88428,3.88428c5.62695,1.44873 11.01245,3.67432 16.00952,6.63477c1.71118,1.00781 3.81079,1.01831 5.50098,0l8.37744,-5.01807c1.0603,-0.64038 2.40405,-0.47241 3.27539,0.39893l9.26978,9.25928c0.87134,0.88184 1.0393,2.23608 0.39892,3.28589l-5.01807,8.37744c-1.00781,1.67969 -1.00781,3.78979 0,5.50098c2.96045,4.98657 5.18603,10.37207 6.62427,15.99902c0.49341,1.92114 1.98413,3.41186 3.89478,3.88428l9.46924,2.37256c1.19678,0.30444 2.03662,1.37524 2.03662,2.61401v13.10156c0,1.23877 -0.83984,2.30957 -2.03662,2.60352l-9.47974,2.37256c-1.90015,0.48291 -3.39087,1.97363 -3.88428,3.88428c-1.43823,5.63745 -3.67432,11.02295 -6.62427,16.00952c-1.01831,1.71118 -1.01831,3.81079 0,5.49048l5.01807,8.38794c0.64038,1.0498 0.47241,2.40405 -0.39892,3.27539l-9.26978,9.26978c-0.87134,0.87134 -2.22559,1.0393 -3.27539,0.39892l-8.37744,-5.01807c-1.67969,-1.01831 -3.78979,-1.01831 -5.50098,0c-4.99707,2.96045 -10.38257,5.18603 -15.99902,6.62427c-1.92114,0.49341 -3.41186,1.98413 -3.89477,3.89478l-2.37256,9.45874c-0.29395,1.20728 -1.36474,2.04712 -2.60352,2.04712h-13.10156c-1.23877,0 -2.30957,-0.83984 -2.60352,-2.03662l-2.37256,-9.46924c-0.48291,-1.91064 -1.97363,-3.40137 -3.88428,-3.89478c-5.62695,-1.43823 -11.01245,-3.66382 -16.00952,-6.62427c-0.86084,-0.50391 -1.80566,-0.75586 -2.76099,-0.75586c-0.95532,0 -1.90015,0.25195 -2.73999,0.75586l-8.37744,5.01807c-1.0498,0.64038 -2.40405,0.47241 -3.28589,-0.39892l-9.25928,-9.25928c-0.87134,-0.88184 -1.03931,-2.23608 -0.40942,-3.28589l5.01807,-8.37744c1.01831,-1.69018 1.01831,-3.78979 0,-5.50098c-2.94995,-4.98657 -5.18603,-10.37207 -6.62427,-15.99902c-0.49341,-1.92114 -1.97363,-3.41186 -3.88428,-3.88428l-9.46924,-2.37256c-1.19678,-0.30444 -2.03662,-1.37524 -2.03662,-2.61401v-13.10156c0,-1.23877 0.83984,-2.30957 2.03662,-2.61401l9.47973,-2.37256c1.90015,-0.47241 3.39087,-1.96313 3.87378,-3.87378c1.44873,-5.63745 3.68481,-11.02295 6.63477,-16.00952c1.00781,-1.71118 1.00781,-3.82129 0,-5.50098l-5.01807,-8.37744c-0.64038,-1.0498 -0.47241,-2.40405 0.39893,-3.28589l9.26977,-9.25928c0.87134,-0.87134 2.22559,-1.03931 3.27539,-0.39893l8.37744,5.01807c1.67969,1.00781 3.78979,1.01831 5.50098,0c4.99707,-2.96045 10.38257,-5.18604 15.99902,-6.63477c1.92114,-0.48291 3.41186,-1.97363 3.88428,-3.88428l2.37256,-9.46924c0.30444,-1.19678 1.37524,-2.03662 2.61401,-2.03662zM77.68555,33.03735c-0.40942,-0.021 -0.81885,0.0105 -1.22827,0.08398c-25.61523,4.58765 -44.20728,26.83301 -44.20728,52.87866c0,6.30933 1.10229,12.51367 3.28589,18.44507c0.57739,1.57471 1.81616,2.77148 3.39087,3.30689c0.5564,0.17847 1.12329,0.26245 1.69018,0.26245c1.02881,0 2.04712,-0.29395 2.92896,-0.87134l26.68604,-17.43726l-0.20996,-1.66919c-0.08398,-0.67187 -0.14697,-1.34375 -0.14697,-2.03662c0,-5.9104 3.2334,-11.33789 8.45093,-14.17236c1.70068,-0.92383 2.79248,-2.59302 2.88696,-4.46167l1.5957,-28.64917c0.09448,-1.64819 -0.56689,-3.2229 -1.80566,-4.3252c-0.93433,-0.81885 -2.09961,-1.30176 -3.31738,-1.35425zM94.31445,33.04785c-1.21777,0.05249 -2.38306,0.5144 -3.31738,1.34375c-1.23877,1.0918 -1.90015,2.66651 -1.80566,4.3252l1.5957,28.64917c0.09448,1.86865 1.17578,3.52734 2.88696,4.46167c5.20703,2.83447 8.45093,8.26196 8.45093,14.17236c0,0.45142 -0.03149,0.89233 -0.07349,1.33325l-0.12598,1.5957l26.79102,17.52124c0.89234,0.57739 1.91065,0.88184 2.92896,0.88184c0.58789,0 1.17578,-0.10498 1.75317,-0.29395c1.58521,-0.5459 2.81348,-1.76367 3.36987,-3.35937c1.97363,-5.67944 2.98145,-11.62134 2.98145,-17.67871c0,-26.04565 -18.59204,-48.29102 -44.20728,-52.87866c-0.40942,-0.07349 -0.81885,-0.09448 -1.22827,-0.07349zM94.5979,38.41235c23.04321,4.13623 39.7771,24.14551 39.7771,47.58765c0,5.44849 -0.90283,10.80249 -2.70849,15.94653l-24.16651,-15.79956v-0.14697c0,-7.88403 -4.3147,-15.12768 -11.34839,-18.98047zM77.43359,38.42285l-1.67969,28.68066c-6.93921,3.7688 -11.25391,11.01245 -11.25391,18.89648c0,0.33594 0.0105,0.67188 0.03149,1.00781l-23.95654,15.5896c-1.95264,-5.34351 -2.94995,-10.92847 -2.94995,-16.59741c0,-23.44214 16.72339,-43.45142 39.80859,-47.57715zM103.30078,46.85278c-1.0498,-0.04199 -2.06811,0.5249 -2.55103,1.53271c-0.62988,1.34375 -0.05249,2.94995 1.29126,3.57984c2.01563,0.95532 3.94727,2.07861 5.75293,3.36987c0.48291,0.33594 1.02881,0.50391 1.56421,0.50391c0.83984,0 1.66919,-0.39893 2.19409,-1.13379c0.86084,-1.20728 0.57739,-2.88696 -0.64038,-3.7478c-2.06811,-1.46973 -4.2832,-2.77148 -6.57178,-3.85278c-0.33594,-0.16797 -0.69287,-0.24146 -1.03931,-0.25195zM118.82739,59.36646c-0.68237,-0.10498 -1.40674,0.06299 -2.00513,0.50391c-1.19678,0.88184 -1.43823,2.57202 -0.5564,3.7583c3.26489,4.40918 5.47998,9.38526 6.59277,14.80225c0.16797,0.82935 0.31494,1.65869 0.43042,2.48804c0.17847,1.35425 1.33325,2.32007 2.64551,2.32007c0.12598,0 0.25195,0 0.37793,-0.0105c1.46973,-0.20996 2.49854,-1.56421 2.29907,-3.03393c-0.13647,-0.94483 -0.29395,-1.90015 -0.49341,-2.84497c-1.27026,-6.19385 -3.81079,-11.88379 -7.5376,-16.92285c-0.44092,-0.59839 -1.0813,-0.95532 -1.75317,-1.0603zM86,80.625c-2.97095,0 -5.375,2.40405 -5.375,5.375c0,2.97095 2.40405,5.375 5.375,5.375c2.97095,0 5.375,-2.40405 5.375,-5.375c0,-2.97095 -2.40405,-5.375 -5.375,-5.375zM97.45337,98.61865c-0.93433,0.06299 -1.86865,0.36743 -2.7085,0.91333c-5.06006,3.29639 -11.86279,3.40137 -17.04883,0.28345c-1.64819,-1.00781 -3.63232,-1.10229 -5.29102,-0.26245l-25.62573,12.95459c-1.46973,0.74536 -2.50903,2.11011 -2.83447,3.72681c-0.32544,1.64819 0.10498,3.31738 1.19678,4.60864c10.24609,12.02026 25.14282,18.90698 40.8584,18.90698c15.98853,0 31.04272,-7.08618 41.30982,-19.43189c1.0603,-1.29126 1.48022,-2.96045 1.14429,-4.58765c-0.33594,-1.6062 -1.36474,-2.94995 -2.83447,-3.69531l-25.43677,-12.86011c-0.86084,-0.43042 -1.79517,-0.61939 -2.72949,-0.5564zM97.7998,103.98315l25.36328,12.8916c-9.22778,11.12793 -22.78076,17.50024 -37.16309,17.50024c-14.14087,0 -27.54687,-6.20435 -36.78516,-17.06982l25.70972,-12.9021c6.91821,4.17822 15.87305,4.07324 22.87524,-0.41992zM103.35327,112.90649c-0.34643,0.06299 -0.67187,0.18896 -0.98682,0.39892c-1.23877,0.82935 -1.57471,2.49854 -0.74536,3.72681l2.97095,4.48267c0.5144,0.77685 1.36474,1.18628 2.23608,1.18628c0.5144,0 1.02881,-0.13647 1.48022,-0.44092c1.23877,-0.82935 1.57471,-2.48804 0.75586,-3.72681l-2.98145,-4.48267c-0.60889,-0.92383 -1.70068,-1.34375 -2.72949,-1.14429zM69.16113,113.26343c-1.02881,-0.16797 -2.11011,0.27295 -2.70849,1.21777l-2.87647,4.53516c-0.79785,1.25977 -0.41992,2.91846 0.82935,3.71631c0.45142,0.28345 0.94482,0.41992 1.43823,0.41992c0.89233,0 1.76367,-0.44092 2.26758,-1.24927l2.88696,-4.54565c0.79785,-1.24927 0.41992,-2.91846 -0.82935,-3.71631c-0.31494,-0.18896 -0.66138,-0.31494 -1.00781,-0.37793zM93.02319,117.64111c-0.34643,-0.07349 -0.70337,-0.07349 -1.0708,0.0105c-1.44873,0.29395 -2.39355,1.72168 -2.08911,3.17041l1.0813,5.27002c0.25195,1.27026 1.37524,2.1416 2.62451,2.1416c0.17847,0 0.36743,-0.021 0.5459,-0.06299c1.44873,-0.29395 2.39355,-1.71118 2.08911,-3.15991l-1.0813,-5.27002c-0.22046,-1.0918 -1.0708,-1.88965 -2.09961,-2.09961zM80.66699,117.75659c-1.44873,-0.27295 -2.85547,0.70337 -3.12842,2.1626l-0.97632,5.29102c-0.26245,1.45923 0.70337,2.85547 2.1731,3.12842c0.15747,0.03149 0.31494,0.04199 0.47241,0.04199c1.28076,0 2.40405,-0.90283 2.64551,-2.19409l0.96582,-5.29102c0.27295,-1.46973 -0.69287,-2.86597 -2.1521,-3.13892z"></path></g></g></svg>
        <svg class="svg-color" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
            width="50" height="50"
            viewBox="0 0 172 172"
            style=" fill:#000000;"><g fill="none" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><path d="M0,172v-172h172v172z" fill="none"></path><g fill="#ffffff"><path d="M86,0c-12.30371,0 -23.21118,13.13306 -30.06641,33.8877c-21.40552,-4.45117 -38.23389,-1.58521 -44.40674,9.1123c-6.22534,10.78149 -0.26245,26.75952 14.25635,43c-14.5188,16.24048 -20.48169,32.21851 -14.25635,43c2.56152,4.45117 7.0022,7.5061 12.78662,9.28027c0.59839,3.86328 3.91577,6.84473 7.93652,6.84473c3.36987,0 6.25684,-2.07861 7.46411,-5.02857c4.98657,-0.12598 10.43506,-0.80835 16.21948,-2.01562c6.90772,20.90161 17.86768,33.91919 30.06641,33.91919c12.46118,0 23.32666,-13.17505 30.13989,-33.89819c2.78198,0.57739 5.53247,1.0708 8.18848,1.40674c1.81616,0.24146 3.53784,0.37793 5.23853,0.48291c1.17578,2.99194 4.08374,5.13354 7.4956,5.13354c3.7478,0 6.87622,-2.58252 7.77905,-6.04687c7.31714,-1.6062 12.69214,-4.97607 15.64209,-10.07812c6.08887,-10.56103 0.50391,-26.42358 -14.27734,-42.95801c14.79175,-16.46094 20.47119,-32.31299 14.27734,-43.04199c-5.24902,-9.08081 -18.07764,-12.80762 -36.15527,-10.50854c-2.66651,0.33594 -5.42749,0.82935 -8.21997,1.41724c-1.52222,-4.61914 -3.2229,-8.86035 -5.12305,-12.66065c1.16528,-1.40674 1.88965,-3.17041 1.88965,-5.12305c0,-4.44067 -3.62183,-8.0625 -8.0625,-8.0625c-0.80835,0 -1.57471,0.15747 -2.30957,0.37793c-4.95508,-5.41699 -10.54004,-8.44043 -16.50293,-8.44043zM86,5.375c4.27271,0 8.38794,2.23608 12.15674,6.21484c-0.88184,1.29126 -1.40674,2.84497 -1.40674,4.53516c0,4.44067 3.62183,8.0625 8.0625,8.0625c0.5249,0 1.03931,-0.06299 1.54321,-0.15747c1.6167,3.33838 3.09692,7.05469 4.41968,11.08594c-7.95752,2.03662 -16.30347,5.01807 -24.7334,8.74488c-8.65039,-3.83179 -17.04883,-6.76074 -24.93286,-8.75537c5.97339,-18.14062 15.00171,-29.73047 24.89087,-29.73047zM104.8125,13.4375c1.48022,0 2.6875,1.20728 2.6875,2.6875c0,1.48022 -1.20728,2.6875 -2.6875,2.6875c-1.48022,0 -2.6875,-1.20728 -2.6875,-2.6875c0,-1.48022 1.20728,-2.6875 2.6875,-2.6875zM137.66089,16.72339c-1.46973,-0.09448 -2.77148,0.98682 -2.88696,2.46704l-0.36743,4.70313c-0.12598,1.48022 0.97632,2.78198 2.45654,2.89746c0.07349,0.0105 0.14697,0.0105 0.22046,0.0105c1.38574,0 2.56152,-1.0708 2.677,-2.47754l0.36743,-4.71362c0.12598,-1.46973 -0.97632,-2.77148 -2.46704,-2.88696zM122.44922,16.93335c-1.46973,0.23096 -2.46704,1.6062 -2.23608,3.07593l0.75586,4.70313c0.19946,1.31226 1.34375,2.25708 2.64551,2.25708c0.13647,0 0.28345,0 0.43042,-0.02099c1.45923,-0.24146 2.45654,-1.6167 2.22559,-3.07593l-0.74536,-4.70312c-0.23096,-1.46973 -1.6062,-2.46704 -3.07593,-2.23609zM151.60229,19.21143c-1.0393,0.08398 -1.97363,0.78735 -2.32007,1.84766l-1.48022,4.51416c-0.47241,1.40674 0.30444,2.92896 1.72168,3.39087c0.27295,0.09448 0.5564,0.13647 0.82935,0.13647c1.13379,0 2.18359,-0.72436 2.55102,-1.84766l1.48023,-4.53516c0.46191,-1.40674 -0.30445,-2.91846 -1.71118,-3.38037c-0.35693,-0.11548 -0.71387,-0.15747 -1.0708,-0.12598zM165.76416,24.28198c-1.03931,-0.15747 -2.11011,0.31494 -2.698,1.27027l-2.51953,4.12573c-0.76636,1.27026 -0.36743,2.91846 0.90283,3.69531c0.43042,0.27295 0.92383,0.38843 1.39624,0.38843c0.90283,0 1.78467,-0.45142 2.29907,-1.28076l2.51953,-4.13623c0.76636,-1.27026 0.36743,-2.91846 -0.90283,-3.69531c-0.31494,-0.18896 -0.65088,-0.31494 -0.99731,-0.36743zM135.81323,37.23657c9.91016,0.29395 16.98584,3.2124 20.00928,8.45093c4.8396,8.37744 -0.61939,22.0249 -13.35352,36.36523c-3.72681,-3.81079 -7.90503,-7.64258 -12.55566,-11.43237c-1.15479,-0.93433 -2.84497,-0.76636 -3.7793,0.38843c-0.94483,1.15479 -0.77686,2.84497 0.37793,3.7793c4.55615,3.71631 8.67139,7.46411 12.30371,11.18042c-4.52466,4.65064 -9.77368,9.33277 -15.66309,13.88892c0.30444,-4.51416 0.47241,-9.1333 0.47241,-13.85742c0,-17.44775 -2.1731,-33.53076 -5.9314,-46.94727c2.48804,-0.50391 4.93408,-0.93433 7.31714,-1.23877c3.88428,-0.49341 7.49561,-0.68238 10.80249,-0.57739zM38.21289,37.24707c4.8606,0.05249 10.30908,0.68237 16.1355,1.87915c-2.19409,7.76855 -3.84228,16.43994 -4.8501,25.76221c-7.60059,5.54297 -14.31934,11.32739 -19.97778,17.12232c-12.62915,-14.18286 -18.2666,-27.79883 -13.34302,-36.32324c3.33838,-5.79492 11.3169,-8.53491 22.0354,-8.44043zM112.3606,40.26001c3.68482,13.10156 5.8894,28.91162 5.8894,45.73999c0,16.82837 -2.19409,32.63843 -5.8894,45.72949c-6.39331,-1.6167 -13.04907,-3.86328 -19.82031,-6.63477c2.44604,-1.19678 4.89209,-2.43555 7.35913,-3.7688c1.31226,-0.70337 1.79517,-2.34106 1.0918,-3.64282c-0.71387,-1.30176 -2.34107,-1.79517 -3.64282,-1.0813c-3.81079,2.06811 -7.62158,3.89478 -11.39038,5.61646c-5.3645,-2.45654 -10.7395,-5.20703 -16.08301,-8.29346c-14.55029,-8.39844 -27.13745,-18.19311 -36.62768,-27.9248c4.53516,-4.65064 9.78418,-9.31177 15.6106,-13.83642c-0.14697,2.1206 -0.26245,4.26221 -0.34644,6.4353c-0.05249,1.48022 1.1023,2.71899 2.59302,2.78198c1.53272,0.05249 2.71899,-1.11279 2.77148,-2.59302c0.13647,-3.70581 0.37793,-7.33813 0.71387,-10.88647c4.78711,-3.42236 9.89966,-6.71875 15.28516,-9.82617c5.3645,-3.09692 10.7605,-5.85791 16.1355,-8.31445c3.48535,1.58521 6.9917,3.30689 10.49805,5.18604c1.31226,0.69287 2.93945,0.20996 3.64282,-1.1023c0.70337,-1.31226 0.20996,-2.93945 -1.10229,-3.63232c-2.1731,-1.16528 -4.3252,-2.26758 -6.48779,-3.31738c6.76074,-2.77148 13.41651,-5.01807 19.79932,-6.63477zM59.51343,40.3125c6.35132,1.6062 13.05957,3.81079 19.93579,6.61377c-4.09424,2.00512 -8.18848,4.13623 -12.26172,6.48779c-4.10474,2.37256 -8.03101,4.8291 -11.78931,7.34863c0.98682,-7.33814 2.38306,-14.20386 4.11523,-20.4502zM106.32422,54.54785c-1.03931,-0.14697 -2.11011,0.32544 -2.677,1.28076c-0.75586,1.28076 -0.34643,2.92895 0.93433,3.68481c1.75317,1.03931 3.46435,2.09961 5.14404,3.18091c0.45142,0.28345 0.95532,0.41992 1.45923,0.41992c0.88184,0 1.75317,-0.43042 2.26758,-1.22827c0.79785,-1.25977 0.43042,-2.91846 -0.82935,-3.71631c-1.72168,-1.10229 -3.49585,-2.19409 -5.29102,-3.27539c-0.31494,-0.18896 -0.66138,-0.30444 -1.00781,-0.34643zM86,64.5c-11.85229,0 -21.5,9.64771 -21.5,21.5c0,11.85229 9.64771,21.5 21.5,21.5c11.85229,0 21.5,-9.64771 21.5,-21.5c0,-11.85229 -9.64771,-21.5 -21.5,-21.5zM86,69.875c8.89185,0 16.125,7.23315 16.125,16.125c0,8.89185 -7.23315,16.125 -16.125,16.125c-8.89185,0 -16.125,-7.23315 -16.125,-16.125c0,-8.89185 7.23315,-16.125 16.125,-16.125zM51.052,85.58008c-1.49072,0.021 -2.677,1.22827 -2.66651,2.71899c0.03149,1.94214 0.07349,3.87378 0.15747,5.78442c0.05249,1.44873 1.23877,2.58252 2.677,2.58252c0.03149,0 0.07349,0 0.10498,0c1.49072,-0.06299 2.64551,-1.31226 2.58252,-2.80298c-0.07349,-1.85815 -0.11548,-3.7373 -0.14697,-5.63745c-0.0105,-1.48022 -1.18628,-2.58252 -2.70849,-2.64551zM142.53198,89.95776c12.84961,14.44531 18.10913,28.00879 13.29053,36.35474c-2.05762,3.56934 -6.02588,6.04688 -11.46387,7.35913c-1.29126,-2.75049 -4.06274,-4.67163 -7.29614,-4.67163c-3.57983,0 -6.59277,2.37256 -7.64258,5.60596c-1.42773,-0.09448 -2.89746,-0.23096 -4.40918,-0.41992c-2.38306,-0.30445 -4.8291,-0.73486 -7.31714,-1.23877c2.19409,-7.81055 3.84228,-16.52392 4.8396,-25.87768c7.66358,-5.61646 14.36133,-11.36939 19.99878,-17.11182zM29.52051,89.98926c5.65845,5.79492 12.3772,11.57935 19.97778,17.12232c1.00781,9.34326 2.65601,17.99365 4.8396,25.74121c-5.17554,1.0498 -10.00464,1.65869 -14.43482,1.80566c-1.02881,-3.26489 -4.05224,-5.65845 -7.65308,-5.65845c-2.97095,0 -5.54297,1.6377 -6.94971,4.03125c-4.16773,-1.37524 -7.31714,-3.60083 -9.1228,-6.71875c-4.92358,-8.52441 0.72437,-22.14038 13.34302,-36.32324zM29.0376,101.0332c-0.67187,0.12598 -1.30176,0.50391 -1.72168,1.11279c-0.83984,1.22827 -0.5249,2.89746 0.69287,3.7373l3.92627,2.6875c0.46191,0.31494 0.99731,0.47241 1.52222,0.47241c0.85034,0 1.69018,-0.40942 2.21509,-1.16528c0.83984,-1.22827 0.5249,-2.90796 -0.69287,-3.7373l-3.92627,-2.6875c-0.60889,-0.41992 -1.34375,-0.5459 -2.01562,-0.41992zM110.42896,109.1167c-0.34643,0.06299 -0.68237,0.17847 -0.99732,0.38843c-1.53271,0.96582 -3.08642,1.93164 -4.67163,2.87646c-1.27026,0.75586 -1.69018,2.40405 -0.92383,3.68482c0.50391,0.83984 1.38574,1.31226 2.30957,1.31226c0.46191,0 0.94482,-0.12598 1.36474,-0.38843c1.6272,-0.96582 3.2334,-1.95264 4.80811,-2.94995c1.24927,-0.79785 1.6167,-2.46704 0.81885,-3.71631c-0.59839,-0.93433 -1.67969,-1.38574 -2.70849,-1.20727zM55.41919,111.2478c3.7478,2.51953 7.67407,4.97608 11.76831,7.33814c4.06274,2.34107 8.15698,4.48267 12.24072,6.47729c-6.86572,2.80298 -13.53198,4.98657 -19.85181,6.58228c-1.74268,-6.21484 -3.17041,-13.04907 -4.15723,-20.39771zM21.77295,113.22143c-1.03931,0.04199 -2.01562,0.68238 -2.41455,1.72168c-0.5354,1.38574 0.14697,2.93945 1.53272,3.47485l4.51416,1.75317c0.31494,0.11548 0.65088,0.17847 0.96582,0.17847c1.0813,0 2.09961,-0.65088 2.50903,-1.72168c0.5354,-1.38574 -0.15747,-2.93945 -1.54321,-3.47485l-4.51416,-1.74267c-0.33594,-0.13647 -0.69287,-0.19946 -1.0498,-0.18897zM86,128.11816c8.45093,3.7373 16.81787,6.72925 24.79639,8.77637c-5.97339,18.02515 -14.94922,29.73047 -24.79639,29.73047c-9.71069,0 -18.7915,-11.53735 -24.82788,-29.75146c7.85254,-2.00513 16.19849,-4.93408 24.82788,-8.75537zM32.25,134.375c1.48022,0 2.6875,1.20728 2.6875,2.6875c0,1.48022 -1.20728,2.6875 -2.6875,2.6875c-1.48022,0 -2.6875,-1.20728 -2.6875,-2.6875c0,-1.48022 1.20728,-2.6875 2.6875,-2.6875zM137.0625,134.375c1.48022,0 2.6875,1.20728 2.6875,2.6875c0,1.48022 -1.20728,2.6875 -2.6875,2.6875c-1.48022,0 -2.6875,-1.20728 -2.6875,-2.6875c0,-1.48022 1.20728,-2.6875 2.6875,-2.6875z"></path></g></g></svg>
          
    </div>
    <div class="rights">
        <p>© ElectraLeague. All rights reserved.</p>
    </div>
        </div>
        
      </div>
<script>
  /* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* MIT license: https://opensource.org/licenses/MIT
/* Demo / Generator : vincentgarreau.com/particles.js
/* GitHub : github.com/VincentGarreau/particles.js
/* How to use? : Check the GitHub README
/* v2.0.0
/* ----------------------------------------------- */

var pJS = function(tag_id, params){

  var canvas_el = document.querySelector('#'+tag_id+' > .particles-js-canvas-el');

  /* particles.js variables with default values */
  this.pJS = {
    canvas: {
      el: canvas_el,
      w: canvas_el.offsetWidth,
      h: canvas_el.offsetHeight
    },
    particles: {
      number: {
        value: 400,
        density: {
          enable: true,
          value_area: 800
        }
      },
      color: {
        value: '#fff'
      },
      shape: {
        type: 'circle',
        stroke: {
          width: 0,
          color: '#ff0000'
        },
        polygon: {
          nb_sides: 5
        },
        image: {
          src: '',
          width: 100,
          height: 100
        }
      },
      opacity: {
        value: 1,
        random: false,
        anim: {
          enable: false,
          speed: 2,
          opacity_min: 0,
          sync: false
        }
      },
      size: {
        value: 20,
        random: false,
        anim: {
          enable: false,
          speed: 20,
          size_min: 0,
          sync: false
        }
      },
      line_linked: {
        enable: true,
        distance: 100,
        color: '#fff',
        opacity: 1,
        width: 1
      },
      move: {
        enable: true,
        speed: 2,
        direction: 'none',
        random: false,
        straight: false,
        out_mode: 'out',
        bounce: false,
        attract: {
          enable: false,
          rotateX: 3000,
          rotateY: 3000
        }
      },
      array: []
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: {
          enable: true,
          mode: 'grab'
        },
        onclick: {
          enable: true,
          mode: 'push'
        },
        resize: true
      },
      modes: {
        grab:{
          distance: 100,
          line_linked:{
            opacity: 1
          }
        },
        bubble:{
          distance: 200,
          size: 80,
          duration: 0.4
        },
        repulse:{
          distance: 200,
          duration: 0.4
        },
        push:{
          particles_nb: 4
        },
        remove:{
          particles_nb: 2
        }
      },
      mouse:{}
    },
    retina_detect: false,
    fn: {
      interact: {},
      modes: {},
      vendors:{}
    },
    tmp: {}
  };

  var pJS = this.pJS;

  /* params settings */
  if(params){
    Object.deepExtend(pJS, params);
  }

  pJS.tmp.obj = {
    size_value: pJS.particles.size.value,
    size_anim_speed: pJS.particles.size.anim.speed,
    move_speed: pJS.particles.move.speed,
    line_linked_distance: pJS.particles.line_linked.distance,
    line_linked_width: pJS.particles.line_linked.width,
    mode_grab_distance: pJS.interactivity.modes.grab.distance,
    mode_bubble_distance: pJS.interactivity.modes.bubble.distance,
    mode_bubble_size: pJS.interactivity.modes.bubble.size,
    mode_repulse_distance: pJS.interactivity.modes.repulse.distance
  };


  pJS.fn.retinaInit = function(){

    if(pJS.retina_detect && window.devicePixelRatio > 1){
      pJS.canvas.pxratio = window.devicePixelRatio; 
      pJS.tmp.retina = true;
    } 
    else{
      pJS.canvas.pxratio = 1;
      pJS.tmp.retina = false;
    }

    pJS.canvas.w = pJS.canvas.el.offsetWidth * pJS.canvas.pxratio;
    pJS.canvas.h = pJS.canvas.el.offsetHeight * pJS.canvas.pxratio;

    pJS.particles.size.value = pJS.tmp.obj.size_value * pJS.canvas.pxratio;
    pJS.particles.size.anim.speed = pJS.tmp.obj.size_anim_speed * pJS.canvas.pxratio;
    pJS.particles.move.speed = pJS.tmp.obj.move_speed * pJS.canvas.pxratio;
    pJS.particles.line_linked.distance = pJS.tmp.obj.line_linked_distance * pJS.canvas.pxratio;
    pJS.interactivity.modes.grab.distance = pJS.tmp.obj.mode_grab_distance * pJS.canvas.pxratio;
    pJS.interactivity.modes.bubble.distance = pJS.tmp.obj.mode_bubble_distance * pJS.canvas.pxratio;
    pJS.particles.line_linked.width = pJS.tmp.obj.line_linked_width * pJS.canvas.pxratio;
    pJS.interactivity.modes.bubble.size = pJS.tmp.obj.mode_bubble_size * pJS.canvas.pxratio;
    pJS.interactivity.modes.repulse.distance = pJS.tmp.obj.mode_repulse_distance * pJS.canvas.pxratio;

  };



  /* ---------- pJS functions - canvas ------------ */

  pJS.fn.canvasInit = function(){
    pJS.canvas.ctx = pJS.canvas.el.getContext('2d');
  };

  pJS.fn.canvasSize = function(){

    pJS.canvas.el.width = pJS.canvas.w;
    pJS.canvas.el.height = pJS.canvas.h;

    if(pJS && pJS.interactivity.events.resize){

      window.addEventListener('resize', function(){

          pJS.canvas.w = pJS.canvas.el.offsetWidth;
          pJS.canvas.h = pJS.canvas.el.offsetHeight;

          /* resize canvas */
          if(pJS.tmp.retina){
            pJS.canvas.w *= pJS.canvas.pxratio;
            pJS.canvas.h *= pJS.canvas.pxratio;
          }

          pJS.canvas.el.width = pJS.canvas.w;
          pJS.canvas.el.height = pJS.canvas.h;

          /* repaint canvas on anim disabled */
          if(!pJS.particles.move.enable){
            pJS.fn.particlesEmpty();
            pJS.fn.particlesCreate();
            pJS.fn.particlesDraw();
            pJS.fn.vendors.densityAutoParticles();
          }

        /* density particles enabled */
        pJS.fn.vendors.densityAutoParticles();

      });

    }

  };


  pJS.fn.canvasPaint = function(){
    pJS.canvas.ctx.fillRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };

  pJS.fn.canvasClear = function(){
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };


  /* --------- pJS functions - particles ----------- */

  pJS.fn.particle = function(color, opacity, position){

    /* size */
    this.radius = (pJS.particles.size.random ? Math.random() : 1) * pJS.particles.size.value;
    if(pJS.particles.size.anim.enable){
      this.size_status = false;
      this.vs = pJS.particles.size.anim.speed / 100;
      if(!pJS.particles.size.anim.sync){
        this.vs = this.vs * Math.random();
      }
    }

    /* position */
    this.x = position ? position.x : Math.random() * pJS.canvas.w;
    this.y = position ? position.y : Math.random() * pJS.canvas.h;

    /* check position  - into the canvas */
    if(this.x > pJS.canvas.w - this.radius*2) this.x = this.x - this.radius;
    else if(this.x < this.radius*2) this.x = this.x + this.radius;
    if(this.y > pJS.canvas.h - this.radius*2) this.y = this.y - this.radius;
    else if(this.y < this.radius*2) this.y = this.y + this.radius;

    /* check position - avoid overlap */
    if(pJS.particles.move.bounce){
      pJS.fn.vendors.checkOverlap(this, position);
    }

    /* color */
    this.color = {};
    if(typeof(color.value) == 'object'){

      if(color.value instanceof Array){
        var color_selected = color.value[Math.floor(Math.random() * pJS.particles.color.value.length)];
        this.color.rgb = hexToRgb(color_selected);
      }else{
        if(color.value.r != undefined && color.value.g != undefined && color.value.b != undefined){
          this.color.rgb = {
            r: color.value.r,
            g: color.value.g,
            b: color.value.b
          }
        }
        if(color.value.h != undefined && color.value.s != undefined && color.value.l != undefined){
          this.color.hsl = {
            h: color.value.h,
            s: color.value.s,
            l: color.value.l
          }
        }
      }

    }
    else if(color.value == 'random'){
      this.color.rgb = {
        r: (Math.floor(Math.random() * (255 - 0 + 1)) + 0),
        g: (Math.floor(Math.random() * (255 - 0 + 1)) + 0),
        b: (Math.floor(Math.random() * (255 - 0 + 1)) + 0)
      }
    }
    else if(typeof(color.value) == 'string'){
      this.color = color;
      this.color.rgb = hexToRgb(this.color.value);
    }

    /* opacity */
    this.opacity = (pJS.particles.opacity.random ? Math.random() : 1) * pJS.particles.opacity.value;
    if(pJS.particles.opacity.anim.enable){
      this.opacity_status = false;
      this.vo = pJS.particles.opacity.anim.speed / 100;
      if(!pJS.particles.opacity.anim.sync){
        this.vo = this.vo * Math.random();
      }
    }

    /* animation - velocity for speed */
    var velbase = {}
    switch(pJS.particles.move.direction){
      case 'top':
        velbase = { x:0, y:-1 };
      break;
      case 'top-right':
        velbase = { x:0.5, y:-0.5 };
      break;
      case 'right':
        velbase = { x:1, y:-0 };
      break;
      case 'bottom-right':
        velbase = { x:0.5, y:0.5 };
      break;
      case 'bottom':
        velbase = { x:0, y:1 };
      break;
      case 'bottom-left':
        velbase = { x:-0.5, y:1 };
      break;
      case 'left':
        velbase = { x:-1, y:0 };
      break;
      case 'top-left':
        velbase = { x:-0.5, y:-0.5 };
      break;
      default:
        velbase = { x:0, y:0 };
      break;
    }

    if(pJS.particles.move.straight){
      this.vx = velbase.x;
      this.vy = velbase.y;
      if(pJS.particles.move.random){
        this.vx = this.vx * (Math.random());
        this.vy = this.vy * (Math.random());
      }
    }else{
      this.vx = velbase.x + Math.random()-0.5;
      this.vy = velbase.y + Math.random()-0.5;
    }

    // var theta = 2.0 * Math.PI * Math.random();
    // this.vx = Math.cos(theta);
    // this.vy = Math.sin(theta);

    this.vx_i = this.vx;
    this.vy_i = this.vy;

    

    /* if shape is image */

    var shape_type = pJS.particles.shape.type;
    if(typeof(shape_type) == 'object'){
      if(shape_type instanceof Array){
        var shape_selected = shape_type[Math.floor(Math.random() * shape_type.length)];
        this.shape = shape_selected;
      }
    }else{
      this.shape = shape_type;
    }

    if(this.shape == 'image'){
      var sh = pJS.particles.shape;
      this.img = {
        src: sh.image.src,
        ratio: sh.image.width / sh.image.height
      }
      if(!this.img.ratio) this.img.ratio = 1;
      if(pJS.tmp.img_type == 'svg' && pJS.tmp.source_svg != undefined){
        pJS.fn.vendors.createSvgImg(this);
        if(pJS.tmp.pushing){
          this.img.loaded = false;
        }
      }
    }

    

  };


  pJS.fn.particle.prototype.draw = function() {

    var p = this;

    if(p.radius_bubble != undefined){
      var radius = p.radius_bubble; 
    }else{
      var radius = p.radius;
    }

    if(p.opacity_bubble != undefined){
      var opacity = p.opacity_bubble;
    }else{
      var opacity = p.opacity;
    }

    if(p.color.rgb){
      var color_value = 'rgba('+p.color.rgb.r+','+p.color.rgb.g+','+p.color.rgb.b+','+opacity+')';
    }else{
      var color_value = 'hsla('+p.color.hsl.h+','+p.color.hsl.s+'%,'+p.color.hsl.l+'%,'+opacity+')';
    }

    pJS.canvas.ctx.fillStyle = color_value;
    pJS.canvas.ctx.beginPath();

    switch(p.shape){

      case 'circle':
        pJS.canvas.ctx.arc(p.x, p.y, radius, 0, Math.PI * 2, false);
      break;

      case 'edge':
        pJS.canvas.ctx.rect(p.x-radius, p.y-radius, radius*2, radius*2);
      break;

      case 'triangle':
        pJS.fn.vendors.drawShape(pJS.canvas.ctx, p.x-radius, p.y+radius / 1.66, radius*2, 3, 2);
      break;

      case 'polygon':
        pJS.fn.vendors.drawShape(
          pJS.canvas.ctx,
          p.x - radius / (pJS.particles.shape.polygon.nb_sides/3.5), // startX
          p.y - radius / (2.66/3.5), // startY
          radius*2.66 / (pJS.particles.shape.polygon.nb_sides/3), // sideLength
          pJS.particles.shape.polygon.nb_sides, // sideCountNumerator
          1 // sideCountDenominator
        );
      break;

      case 'star':
        pJS.fn.vendors.drawShape(
          pJS.canvas.ctx,
          p.x - radius*2 / (pJS.particles.shape.polygon.nb_sides/4), // startX
          p.y - radius / (2*2.66/3.5), // startY
          radius*2*2.66 / (pJS.particles.shape.polygon.nb_sides/3), // sideLength
          pJS.particles.shape.polygon.nb_sides, // sideCountNumerator
          2 // sideCountDenominator
        );
      break;

      case 'image':

        function draw(){
          pJS.canvas.ctx.drawImage(
            img_obj,
            p.x-radius,
            p.y-radius,
            radius*2,
            radius*2 / p.img.ratio
          );
        }

        if(pJS.tmp.img_type == 'svg'){
          var img_obj = p.img.obj;
        }else{
          var img_obj = pJS.tmp.img_obj;
        }

        if(img_obj){
          draw();
        }

      break;

    }

    pJS.canvas.ctx.closePath();

    if(pJS.particles.shape.stroke.width > 0){
      pJS.canvas.ctx.strokeStyle = pJS.particles.shape.stroke.color;
      pJS.canvas.ctx.lineWidth = pJS.particles.shape.stroke.width;
      pJS.canvas.ctx.stroke();
    }
    
    pJS.canvas.ctx.fill();
    
  };


  pJS.fn.particlesCreate = function(){
    for(var i = 0; i < pJS.particles.number.value; i++) {
      pJS.particles.array.push(new pJS.fn.particle(pJS.particles.color, pJS.particles.opacity.value));
    }
  };

  pJS.fn.particlesUpdate = function(){

    for(var i = 0; i < pJS.particles.array.length; i++){

      /* the particle */
      var p = pJS.particles.array[i];

      // var d = ( dx = pJS.interactivity.mouse.click_pos_x - p.x ) * dx + ( dy = pJS.interactivity.mouse.click_pos_y - p.y ) * dy;
      // var f = -BANG_SIZE / d;
      // if ( d < BANG_SIZE ) {
      //     var t = Math.atan2( dy, dx );
      //     p.vx = f * Math.cos(t);
      //     p.vy = f * Math.sin(t);
      // }

      /* move the particle */
      if(pJS.particles.move.enable){
        var ms = pJS.particles.move.speed/2;
        p.x += p.vx * ms;
        p.y += p.vy * ms;
      }

      /* change opacity status */
      if(pJS.particles.opacity.anim.enable) {
        if(p.opacity_status == true) {
          if(p.opacity >= pJS.particles.opacity.value) p.opacity_status = false;
          p.opacity += p.vo;
        }else {
          if(p.opacity <= pJS.particles.opacity.anim.opacity_min) p.opacity_status = true;
          p.opacity -= p.vo;
        }
        if(p.opacity < 0) p.opacity = 0;
      }

      /* change size */
      if(pJS.particles.size.anim.enable){
        if(p.size_status == true){
          if(p.radius >= pJS.particles.size.value) p.size_status = false;
          p.radius += p.vs;
        }else{
          if(p.radius <= pJS.particles.size.anim.size_min) p.size_status = true;
          p.radius -= p.vs;
        }
        if(p.radius < 0) p.radius = 0;
      }

      /* change particle position if it is out of canvas */
      if(pJS.particles.move.out_mode == 'bounce'){
        var new_pos = {
          x_left: p.radius,
          x_right:  pJS.canvas.w,
          y_top: p.radius,
          y_bottom: pJS.canvas.h
        }
      }else{
        var new_pos = {
          x_left: -p.radius,
          x_right: pJS.canvas.w + p.radius,
          y_top: -p.radius,
          y_bottom: pJS.canvas.h + p.radius
        }
      }

      if(p.x - p.radius > pJS.canvas.w){
        p.x = new_pos.x_left;
        p.y = Math.random() * pJS.canvas.h;
      }
      else if(p.x + p.radius < 0){
        p.x = new_pos.x_right;
        p.y = Math.random() * pJS.canvas.h;
      }
      if(p.y - p.radius > pJS.canvas.h){
        p.y = new_pos.y_top;
        p.x = Math.random() * pJS.canvas.w;
      }
      else if(p.y + p.radius < 0){
        p.y = new_pos.y_bottom;
        p.x = Math.random() * pJS.canvas.w;
      }

      /* out of canvas modes */
      switch(pJS.particles.move.out_mode){
        case 'bounce':
          if (p.x + p.radius > pJS.canvas.w) p.vx = -p.vx;
          else if (p.x - p.radius < 0) p.vx = -p.vx;
          if (p.y + p.radius > pJS.canvas.h) p.vy = -p.vy;
          else if (p.y - p.radius < 0) p.vy = -p.vy;
        break;
      }

      /* events */
      if(isInArray('grab', pJS.interactivity.events.onhover.mode)){
        pJS.fn.modes.grabParticle(p);
      }

      if(isInArray('bubble', pJS.interactivity.events.onhover.mode) || isInArray('bubble', pJS.interactivity.events.onclick.mode)){
        pJS.fn.modes.bubbleParticle(p);
      }

      if(isInArray('repulse', pJS.interactivity.events.onhover.mode) || isInArray('repulse', pJS.interactivity.events.onclick.mode)){
        pJS.fn.modes.repulseParticle(p);
      }

      /* interaction auto between particles */
      if(pJS.particles.line_linked.enable || pJS.particles.move.attract.enable){
        for(var j = i + 1; j < pJS.particles.array.length; j++){
          var p2 = pJS.particles.array[j];

          /* link particles */
          if(pJS.particles.line_linked.enable){
            pJS.fn.interact.linkParticles(p,p2);
          }

          /* attract particles */
          if(pJS.particles.move.attract.enable){
            pJS.fn.interact.attractParticles(p,p2);
          }

          /* bounce particles */
          if(pJS.particles.move.bounce){
            pJS.fn.interact.bounceParticles(p,p2);
          }

        }
      }


    }

  };

  pJS.fn.particlesDraw = function(){

    /* clear canvas */
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);

    /* update each particles param */
    pJS.fn.particlesUpdate();

    /* draw each particle */
    for(var i = 0; i < pJS.particles.array.length; i++){
      var p = pJS.particles.array[i];
      p.draw();
    }

  };

  pJS.fn.particlesEmpty = function(){
    pJS.particles.array = [];
  };

  pJS.fn.particlesRefresh = function(){

    /* init all */
    cancelRequestAnimFrame(pJS.fn.checkAnimFrame);
    cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
    pJS.tmp.source_svg = undefined;
    pJS.tmp.img_obj = undefined;
    pJS.tmp.count_svg = 0;
    pJS.fn.particlesEmpty();
    pJS.fn.canvasClear();
    
    /* restart */
    pJS.fn.vendors.start();

  };


  /* ---------- pJS functions - particles interaction ------------ */

  pJS.fn.interact.linkParticles = function(p1, p2){

    var dx = p1.x - p2.x,
        dy = p1.y - p2.y,
        dist = Math.sqrt(dx*dx + dy*dy);

    /* draw a line between p1 and p2 if the distance between them is under the config distance */
    if(dist <= pJS.particles.line_linked.distance){

      var opacity_line = pJS.particles.line_linked.opacity - (dist / (1/pJS.particles.line_linked.opacity)) / pJS.particles.line_linked.distance;

      if(opacity_line > 0){        
        
        /* style */
        var color_line = pJS.particles.line_linked.color_rgb_line;
        pJS.canvas.ctx.strokeStyle = 'rgba('+color_line.r+','+color_line.g+','+color_line.b+','+opacity_line+')';
        pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
        //pJS.canvas.ctx.lineCap = 'round'; /* performance issue */
        
        /* path */
        pJS.canvas.ctx.beginPath();
        pJS.canvas.ctx.moveTo(p1.x, p1.y);
        pJS.canvas.ctx.lineTo(p2.x, p2.y);
        pJS.canvas.ctx.stroke();
        pJS.canvas.ctx.closePath();

      }

    }

  };


  pJS.fn.interact.attractParticles  = function(p1, p2){

    /* condensed particles */
    var dx = p1.x - p2.x,
        dy = p1.y - p2.y,
        dist = Math.sqrt(dx*dx + dy*dy);

    if(dist <= pJS.particles.line_linked.distance){

      var ax = dx/(pJS.particles.move.attract.rotateX*1000),
          ay = dy/(pJS.particles.move.attract.rotateY*1000);

      p1.vx -= ax;
      p1.vy -= ay;

      p2.vx += ax;
      p2.vy += ay;

    }
    

  }


  pJS.fn.interact.bounceParticles = function(p1, p2){

    var dx = p1.x - p2.x,
        dy = p1.y - p2.y,
        dist = Math.sqrt(dx*dx + dy*dy),
        dist_p = p1.radius+p2.radius;

    if(dist <= dist_p){
      p1.vx = -p1.vx;
      p1.vy = -p1.vy;

      p2.vx = -p2.vx;
      p2.vy = -p2.vy;
    }

  }


  /* ---------- pJS functions - modes events ------------ */

  pJS.fn.modes.pushParticles = function(nb, pos){

    pJS.tmp.pushing = true;

    for(var i = 0; i < nb; i++){
      pJS.particles.array.push(
        new pJS.fn.particle(
          pJS.particles.color,
          pJS.particles.opacity.value,
          {
            'x': pos ? pos.pos_x : Math.random() * pJS.canvas.w,
            'y': pos ? pos.pos_y : Math.random() * pJS.canvas.h
          }
        )
      )
      if(i == nb-1){
        if(!pJS.particles.move.enable){
          pJS.fn.particlesDraw();
        }
        pJS.tmp.pushing = false;
      }
    }

  };


  pJS.fn.modes.removeParticles = function(nb){

    pJS.particles.array.splice(0, nb);
    if(!pJS.particles.move.enable){
      pJS.fn.particlesDraw();
    }

  };


  pJS.fn.modes.bubbleParticle = function(p){

    /* on hover event */
    if(pJS.interactivity.events.onhover.enable && isInArray('bubble', pJS.interactivity.events.onhover.mode)){

      var dx_mouse = p.x - pJS.interactivity.mouse.pos_x,
          dy_mouse = p.y - pJS.interactivity.mouse.pos_y,
          dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse),
          ratio = 1 - dist_mouse / pJS.interactivity.modes.bubble.distance;

      function init(){
        p.opacity_bubble = p.opacity;
        p.radius_bubble = p.radius;
      }

      /* mousemove - check ratio */
      if(dist_mouse <= pJS.interactivity.modes.bubble.distance){

        if(ratio >= 0 && pJS.interactivity.status == 'mousemove'){
          
          /* size */
          if(pJS.interactivity.modes.bubble.size != pJS.particles.size.value){

            if(pJS.interactivity.modes.bubble.size > pJS.particles.size.value){
              var size = p.radius + (pJS.interactivity.modes.bubble.size*ratio);
              if(size >= 0){
                p.radius_bubble = size;
              }
            }else{
              var dif = p.radius - pJS.interactivity.modes.bubble.size,
                  size = p.radius - (dif*ratio);
              if(size > 0){
                p.radius_bubble = size;
              }else{
                p.radius_bubble = 0;
              }
            }

          }

          /* opacity */
          if(pJS.interactivity.modes.bubble.opacity != pJS.particles.opacity.value){

            if(pJS.interactivity.modes.bubble.opacity > pJS.particles.opacity.value){
              var opacity = pJS.interactivity.modes.bubble.opacity*ratio;
              if(opacity > p.opacity && opacity <= pJS.interactivity.modes.bubble.opacity){
                p.opacity_bubble = opacity;
              }
            }else{
              var opacity = p.opacity - (pJS.particles.opacity.value-pJS.interactivity.modes.bubble.opacity)*ratio;
              if(opacity < p.opacity && opacity >= pJS.interactivity.modes.bubble.opacity){
                p.opacity_bubble = opacity;
              }
            }

          }

        }

      }else{
        init();
      }


      /* mouseleave */
      if(pJS.interactivity.status == 'mouseleave'){
        init();
      }
    
    }

    /* on click event */
    else if(pJS.interactivity.events.onclick.enable && isInArray('bubble', pJS.interactivity.events.onclick.mode)){


      if(pJS.tmp.bubble_clicking){
        var dx_mouse = p.x - pJS.interactivity.mouse.click_pos_x,
            dy_mouse = p.y - pJS.interactivity.mouse.click_pos_y,
            dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse),
            time_spent = (new Date().getTime() - pJS.interactivity.mouse.click_time)/1000;

        if(time_spent > pJS.interactivity.modes.bubble.duration){
          pJS.tmp.bubble_duration_end = true;
        }

        if(time_spent > pJS.interactivity.modes.bubble.duration*2){
          pJS.tmp.bubble_clicking = false;
          pJS.tmp.bubble_duration_end = false;
        }
      }


      function process(bubble_param, particles_param, p_obj_bubble, p_obj, id){

        if(bubble_param != particles_param){

          if(!pJS.tmp.bubble_duration_end){
            if(dist_mouse <= pJS.interactivity.modes.bubble.distance){
              if(p_obj_bubble != undefined) var obj = p_obj_bubble;
              else var obj = p_obj;
              if(obj != bubble_param){
                var value = p_obj - (time_spent * (p_obj - bubble_param) / pJS.interactivity.modes.bubble.duration);
                if(id == 'size') p.radius_bubble = value;
                if(id == 'opacity') p.opacity_bubble = value;
              }
            }else{
              if(id == 'size') p.radius_bubble = undefined;
              if(id == 'opacity') p.opacity_bubble = undefined;
            }
          }else{
            if(p_obj_bubble != undefined){
              var value_tmp = p_obj - (time_spent * (p_obj - bubble_param) / pJS.interactivity.modes.bubble.duration),
                  dif = bubble_param - value_tmp;
                  value = bubble_param + dif;
              if(id == 'size') p.radius_bubble = value;
              if(id == 'opacity') p.opacity_bubble = value;
            }
          }

        }

      }

      if(pJS.tmp.bubble_clicking){
        /* size */
        process(pJS.interactivity.modes.bubble.size, pJS.particles.size.value, p.radius_bubble, p.radius, 'size');
        /* opacity */
        process(pJS.interactivity.modes.bubble.opacity, pJS.particles.opacity.value, p.opacity_bubble, p.opacity, 'opacity');
      }

    }

  };


  pJS.fn.modes.repulseParticle = function(p){

    if(pJS.interactivity.events.onhover.enable && isInArray('repulse', pJS.interactivity.events.onhover.mode) && pJS.interactivity.status == 'mousemove') {

      var dx_mouse = p.x - pJS.interactivity.mouse.pos_x,
          dy_mouse = p.y - pJS.interactivity.mouse.pos_y,
          dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse);

      var normVec = {x: dx_mouse/dist_mouse, y: dy_mouse/dist_mouse},
          repulseRadius = pJS.interactivity.modes.repulse.distance,
          velocity = 100,
          repulseFactor = clamp((1/repulseRadius)*(-1*Math.pow(dist_mouse/repulseRadius,2)+1)*repulseRadius*velocity, 0, 50);
      
      var pos = {
        x: p.x + normVec.x * repulseFactor,
        y: p.y + normVec.y * repulseFactor
      }

      if(pJS.particles.move.out_mode == 'bounce'){
        if(pos.x - p.radius > 0 && pos.x + p.radius < pJS.canvas.w) p.x = pos.x;
        if(pos.y - p.radius > 0 && pos.y + p.radius < pJS.canvas.h) p.y = pos.y;
      }else{
        p.x = pos.x;
        p.y = pos.y;
      }
    
    }


    else if(pJS.interactivity.events.onclick.enable && isInArray('repulse', pJS.interactivity.events.onclick.mode)) {

      if(!pJS.tmp.repulse_finish){
        pJS.tmp.repulse_count++;
        if(pJS.tmp.repulse_count == pJS.particles.array.length){
          pJS.tmp.repulse_finish = true;
        }
      }

      if(pJS.tmp.repulse_clicking){

        var repulseRadius = Math.pow(pJS.interactivity.modes.repulse.distance/6, 3);

        var dx = pJS.interactivity.mouse.click_pos_x - p.x,
            dy = pJS.interactivity.mouse.click_pos_y - p.y,
            d = dx*dx + dy*dy;

        var force = -repulseRadius / d * 1;

        function process(){

          var f = Math.atan2(dy,dx);
          p.vx = force * Math.cos(f);
          p.vy = force * Math.sin(f);

          if(pJS.particles.move.out_mode == 'bounce'){
            var pos = {
              x: p.x + p.vx,
              y: p.y + p.vy
            }
            if (pos.x + p.radius > pJS.canvas.w) p.vx = -p.vx;
            else if (pos.x - p.radius < 0) p.vx = -p.vx;
            if (pos.y + p.radius > pJS.canvas.h) p.vy = -p.vy;
            else if (pos.y - p.radius < 0) p.vy = -p.vy;
          }

        }

        // default
        if(d <= repulseRadius){
          process();
        }

        // bang - slow motion mode
        // if(!pJS.tmp.repulse_finish){
        //   if(d <= repulseRadius){
        //     process();
        //   }
        // }else{
        //   process();
        // }
        

      }else{

        if(pJS.tmp.repulse_clicking == false){

          p.vx = p.vx_i;
          p.vy = p.vy_i;
        
        }

      }

    }

  }


  pJS.fn.modes.grabParticle = function(p){

    if(pJS.interactivity.events.onhover.enable && pJS.interactivity.status == 'mousemove'){

      var dx_mouse = p.x - pJS.interactivity.mouse.pos_x,
          dy_mouse = p.y - pJS.interactivity.mouse.pos_y,
          dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse);

      /* draw a line between the cursor and the particle if the distance between them is under the config distance */
      if(dist_mouse <= pJS.interactivity.modes.grab.distance){

        var opacity_line = pJS.interactivity.modes.grab.line_linked.opacity - (dist_mouse / (1/pJS.interactivity.modes.grab.line_linked.opacity)) / pJS.interactivity.modes.grab.distance;

        if(opacity_line > 0){

          /* style */
          var color_line = pJS.particles.line_linked.color_rgb_line;
          pJS.canvas.ctx.strokeStyle = 'rgba('+251+','+195+','+94+','+opacity_line+')';
          pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
          //pJS.canvas.ctx.lineCap = 'round'; /* performance issue */
          
          /* path */
          pJS.canvas.ctx.beginPath();
          pJS.canvas.ctx.moveTo(p.x, p.y);
          pJS.canvas.ctx.lineTo(pJS.interactivity.mouse.pos_x, pJS.interactivity.mouse.pos_y);
          pJS.canvas.ctx.stroke();
          pJS.canvas.ctx.closePath();

        }

      }

    }

  };



  /* ---------- pJS functions - vendors ------------ */

  pJS.fn.vendors.eventsListeners = function(){

    /* events target element */
    if(pJS.interactivity.detect_on == 'window'){
      pJS.interactivity.el = window;
    }else{
      pJS.interactivity.el = pJS.canvas.el;
    }


    /* detect mouse pos - on hover / click event */
    if(pJS.interactivity.events.onhover.enable || pJS.interactivity.events.onclick.enable){

      /* el on mousemove */
      pJS.interactivity.el.addEventListener('mousemove', function(e){

        if(pJS.interactivity.el == window){
          var pos_x = e.clientX,
              pos_y = e.clientY;
        }
        else{
          var pos_x = e.offsetX || e.clientX,
              pos_y = e.offsetY || e.clientY;
        }

        pJS.interactivity.mouse.pos_x = pos_x;
        pJS.interactivity.mouse.pos_y = pos_y;

        if(pJS.tmp.retina){
          pJS.interactivity.mouse.pos_x *= pJS.canvas.pxratio;
          pJS.interactivity.mouse.pos_y *= pJS.canvas.pxratio;
        }

        pJS.interactivity.status = 'mousemove';

      });

      /* el on onmouseleave */
      pJS.interactivity.el.addEventListener('mouseleave', function(e){

        pJS.interactivity.mouse.pos_x = null;
        pJS.interactivity.mouse.pos_y = null;
        pJS.interactivity.status = 'mouseleave';

      });

    }

    /* on click event */
    if(pJS.interactivity.events.onclick.enable){

      pJS.interactivity.el.addEventListener('click', function(){

        pJS.interactivity.mouse.click_pos_x = pJS.interactivity.mouse.pos_x;
        pJS.interactivity.mouse.click_pos_y = pJS.interactivity.mouse.pos_y;
        pJS.interactivity.mouse.click_time = new Date().getTime();

        if(pJS.interactivity.events.onclick.enable){

          switch(pJS.interactivity.events.onclick.mode){

            case 'push':
              if(pJS.particles.move.enable){
                pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb, pJS.interactivity.mouse);
              }else{
                if(pJS.interactivity.modes.push.particles_nb == 1){
                  pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb, pJS.interactivity.mouse);
                }
                else if(pJS.interactivity.modes.push.particles_nb > 1){
                  pJS.fn.modes.pushParticles(pJS.interactivity.modes.push.particles_nb);
                }
              }
            break;

            case 'remove':
              pJS.fn.modes.removeParticles(pJS.interactivity.modes.remove.particles_nb);
            break;

            case 'bubble':
              pJS.tmp.bubble_clicking = true;
            break;

            case 'repulse':
              pJS.tmp.repulse_clicking = true;
              pJS.tmp.repulse_count = 0;
              pJS.tmp.repulse_finish = false;
              setTimeout(function(){
                pJS.tmp.repulse_clicking = false;
              }, pJS.interactivity.modes.repulse.duration*1000)
            break;

          }

        }

      });
        
    }


  };

  pJS.fn.vendors.densityAutoParticles = function(){

    if(pJS.particles.number.density.enable){

      /* calc area */
      var area = pJS.canvas.el.width * pJS.canvas.el.height / 1000;
      if(pJS.tmp.retina){
        area = area/(pJS.canvas.pxratio*2);
      }

      /* calc number of particles based on density area */
      var nb_particles = area * pJS.particles.number.value / pJS.particles.number.density.value_area;

      /* add or remove X particles */
      var missing_particles = pJS.particles.array.length - nb_particles;
      if(missing_particles < 0) pJS.fn.modes.pushParticles(Math.abs(missing_particles));
      else pJS.fn.modes.removeParticles(missing_particles);

    }

  };


  pJS.fn.vendors.checkOverlap = function(p1, position){
    for(var i = 0; i < pJS.particles.array.length; i++){
      var p2 = pJS.particles.array[i];

      var dx = p1.x - p2.x,
          dy = p1.y - p2.y,
          dist = Math.sqrt(dx*dx + dy*dy);

      if(dist <= p1.radius + p2.radius){
        p1.x = position ? position.x : Math.random() * pJS.canvas.w;
        p1.y = position ? position.y : Math.random() * pJS.canvas.h;
        pJS.fn.vendors.checkOverlap(p1);
      }
    }
  };


  pJS.fn.vendors.createSvgImg = function(p){

    /* set color to svg element */
    var svgXml = pJS.tmp.source_svg,
        rgbHex = /#([0-9A-F]{3,6})/gi,
        coloredSvgXml = svgXml.replace(rgbHex, function (m, r, g, b) {
          if(p.color.rgb){
            var color_value = 'rgba('+p.color.rgb.r+','+p.color.rgb.g+','+p.color.rgb.b+','+p.opacity+')';
          }else{
            var color_value = 'hsla('+p.color.hsl.h+','+p.color.hsl.s+'%,'+p.color.hsl.l+'%,'+p.opacity+')';
          }
          return color_value;
        });

    /* prepare to create img with colored svg */
    var svg = new Blob([coloredSvgXml], {type: 'image/svg+xml;charset=utf-8'}),
        DOMURL = window.URL || window.webkitURL || window,
        url = DOMURL.createObjectURL(svg);

    /* create particle img obj */
    var img = new Image();
    img.addEventListener('load', function(){
      p.img.obj = img;
      p.img.loaded = true;
      DOMURL.revokeObjectURL(url);
      pJS.tmp.count_svg++;
    });
    img.src = url;

  };


  pJS.fn.vendors.destroypJS = function(){
    cancelAnimationFrame(pJS.fn.drawAnimFrame);
    canvas_el.remove();
    pJSDom = null;
  };


  pJS.fn.vendors.drawShape = function(c, startX, startY, sideLength, sideCountNumerator, sideCountDenominator){

    // By Programming Thomas - https://programmingthomas.wordpress.com/2013/04/03/n-sided-shapes/
    var sideCount = sideCountNumerator * sideCountDenominator;
    var decimalSides = sideCountNumerator / sideCountDenominator;
    var interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides;
    var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180; // convert to radians
    c.save();
    c.beginPath();
    c.translate(startX, startY);
    c.moveTo(0,0);
    for (var i = 0; i < sideCount; i++) {
      c.lineTo(sideLength,0);
      c.translate(sideLength,0);
      c.rotate(interiorAngle);
    }
    //c.stroke();
    c.fill();
    c.restore();

  };

  pJS.fn.vendors.exportImg = function(){
    window.open(pJS.canvas.el.toDataURL('image/png'), '_blank');
  };


  pJS.fn.vendors.loadImg = function(type){

    pJS.tmp.img_error = undefined;

    if(pJS.particles.shape.image.src != ''){

      if(type == 'svg'){

        var xhr = new XMLHttpRequest();
        xhr.open('GET', pJS.particles.shape.image.src);
        xhr.onreadystatechange = function (data) {
          if(xhr.readyState == 4){
            if(xhr.status == 200){
              pJS.tmp.source_svg = data.currentTarget.response;
              pJS.fn.vendors.checkBeforeDraw();
            }else{
              console.log('Error pJS - Image not found');
              pJS.tmp.img_error = true;
            }
          }
        }
        xhr.send();

      }else{

        var img = new Image();
        img.addEventListener('load', function(){
          pJS.tmp.img_obj = img;
          pJS.fn.vendors.checkBeforeDraw();
        });
        img.src = pJS.particles.shape.image.src;

      }

    }else{
      console.log('Error pJS - No image.src');
      pJS.tmp.img_error = true;
    }

  };


  pJS.fn.vendors.draw = function(){

    if(pJS.particles.shape.type == 'image'){

      if(pJS.tmp.img_type == 'svg'){

        if(pJS.tmp.count_svg >= pJS.particles.number.value){
          pJS.fn.particlesDraw();
          if(!pJS.particles.move.enable) cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
          else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
        }else{
          //console.log('still loading...');
          if(!pJS.tmp.img_error) pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
        }

      }else{

        if(pJS.tmp.img_obj != undefined){
          pJS.fn.particlesDraw();
          if(!pJS.particles.move.enable) cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
          else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
        }else{
          if(!pJS.tmp.img_error) pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
        }

      }

    }else{
      pJS.fn.particlesDraw();
      if(!pJS.particles.move.enable) cancelRequestAnimFrame(pJS.fn.drawAnimFrame);
      else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);
    }

  };


  pJS.fn.vendors.checkBeforeDraw = function(){

    // if shape is image
    if(pJS.particles.shape.type == 'image'){

      if(pJS.tmp.img_type == 'svg' && pJS.tmp.source_svg == undefined){
        pJS.tmp.checkAnimFrame = requestAnimFrame(check);
      }else{
        //console.log('images loaded! cancel check');
        cancelRequestAnimFrame(pJS.tmp.checkAnimFrame);
        if(!pJS.tmp.img_error){
          pJS.fn.vendors.init();
          pJS.fn.vendors.draw();
        }
        
      }

    }else{
      pJS.fn.vendors.init();
      pJS.fn.vendors.draw();
    }

  };


  pJS.fn.vendors.init = function(){

    /* init canvas + particles */
    pJS.fn.retinaInit();
    pJS.fn.canvasInit();
    pJS.fn.canvasSize();
    pJS.fn.canvasPaint();
    pJS.fn.particlesCreate();
    pJS.fn.vendors.densityAutoParticles();

    /* particles.line_linked - convert hex colors to rgb */
    pJS.particles.line_linked.color_rgb_line = hexToRgb(pJS.particles.line_linked.color);

  };


  pJS.fn.vendors.start = function(){

    if(isInArray('image', pJS.particles.shape.type)){
      pJS.tmp.img_type = pJS.particles.shape.image.src.substr(pJS.particles.shape.image.src.length - 3);
      pJS.fn.vendors.loadImg(pJS.tmp.img_type);
    }else{
      pJS.fn.vendors.checkBeforeDraw();
    }

  };




  /* ---------- pJS - start ------------ */


  pJS.fn.vendors.eventsListeners();

  pJS.fn.vendors.start();
  


};

/* ---------- global functions - vendors ------------ */

Object.deepExtend = function(destination, source) {
  for (var property in source) {
    if (source[property] && source[property].constructor &&
     source[property].constructor === Object) {
      destination[property] = destination[property] || {};
      arguments.callee(destination[property], source[property]);
    } else {
      destination[property] = source[property];
    }
  }
  return destination;
};

window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame    ||
    window.oRequestAnimationFrame      ||
    window.msRequestAnimationFrame     ||
    function(callback){
      window.setTimeout(callback, 1000 / 60);
    };
})();

window.cancelRequestAnimFrame = ( function() {
  return window.cancelAnimationFrame         ||
    window.webkitCancelRequestAnimationFrame ||
    window.mozCancelRequestAnimationFrame    ||
    window.oCancelRequestAnimationFrame      ||
    window.msCancelRequestAnimationFrame     ||
    clearTimeout
} )();

function hexToRgb(hex){
  // By Tim Down - http://stackoverflow.com/a/5624139/3493650
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
     return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
  } : null;
};

function clamp(number, min, max) {
  return Math.min(Math.max(number, min), max);
};

function isInArray(value, array) {
  return array.indexOf(value) > -1;
}


/* ---------- particles.js functions - start ------------ */

window.pJSDom = [];

window.particlesJS = function(tag_id, params){

  //console.log(params);

  /* no string id? so it's object params, and set the id with default id */
  if(typeof(tag_id) != 'string'){
    params = tag_id;
    tag_id = 'particles-js';
  }

  /* no id? set the id to default id */
  if(!tag_id){
    tag_id = 'particles-js';
  }

  /* pJS elements */
  var pJS_tag = document.getElementById(tag_id),
      pJS_canvas_class = 'particles-js-canvas-el',
      exist_canvas = pJS_tag.getElementsByClassName(pJS_canvas_class);

  /* remove canvas if exists into the pJS target tag */
  if(exist_canvas.length){
    while(exist_canvas.length > 0){
      pJS_tag.removeChild(exist_canvas[0]);
    }
  }

  /* create canvas element */
  var canvas_el = document.createElement('canvas');
  canvas_el.className = pJS_canvas_class;

  /* set size canvas */
  canvas_el.style.width = "100%";
  canvas_el.style.height = "100%";

  /* append canvas */
  var canvas = document.getElementById(tag_id).appendChild(canvas_el);

  /* launch particle.js */
  if(canvas != null){
    pJSDom.push(new pJS(tag_id, params));
  }

};

window.particlesJS.load = function(tag_id, path_config_json, callback){

  /* load json config */
  var xhr = new XMLHttpRequest();
  xhr.open('GET', path_config_json);
  xhr.onreadystatechange = function (data) {
    if(xhr.readyState == 4){
      if(xhr.status == 200){
        var params = JSON.parse(data.currentTarget.response);
        window.particlesJS(tag_id, params);
        if(callback) callback();
      }else{
        console.log('Error pJS - XMLHttpRequest status: '+xhr.status);
        console.log('Error pJS - File config not found');
      }
    }
  };
  xhr.send();

};
  </script>

    <script src="../particle.js"></script>
    </body>
    </html>